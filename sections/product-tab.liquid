{{ 'home-page-product.css' | asset_url | stylesheet_tag }}

{% schema %}
{
  "name": "Product Tabs",
  "tag": "section",
  "settings": [
   {
       "type": "text",
       "id": "tab_heading",
       "label": "Tab Heading",
       "default": "LATEST"
    },
    {
      "type":"color",
      "id":"background_color",
      "label":"Background Color"
    }
  ],

  "blocks": [
    {
      "type": "tab",
      "name": "Product Tab",
      "settings": [
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Title",
          "default": "MENS"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        }
      ]
    }
  ],
  "max_blocks": 4,
  "presets": [
    {
      "name": "Product Tabs"
    }
  ]
}
{% endschema %}

<div  class="tabs" style="background-color: {{  section.settings.background_color }};">
  <div class="pua-tabs-wrapper page-width">
    <div class="tabs-inner-wrapper">
      <div class="tabs-wrapper">
        <div class="tab_heading">{{ section.settings.tab_heading }}</div>
        <ul class="pua-tabs">
          {% for block in section.blocks %}
            <li class="{% if forloop.first %}active{% endif %}" data-tab="tab-{{ forloop.index }}">
              {{ block.settings.tab_title }}
            </li>
          {% endfor %}
        </ul>
      </div>
      {% for block in section.blocks %}
        <div class="pua-tab-content test {% if forloop.first %}active{% endif %}" id="tab-tab-{{ forloop.index }}">
          {% assign collection = collections[block.settings.collection] %}
          {% if collection.products.size > 0 %}
            <div class="pua-product-slider swiper" data-product-count="{{ collection.products.size }}">
              <div class="swiper-wrapper">
                {% for product in collection.products %}
                  <div class="swiper-slide">
                    <div class="product-card" itemscope itemtype="https://schema.org/Product">
                      <a href="{{ product.url }}" itemprop="url">
                        <img
                                class="main-image"
                                src="{{ product.featured_image | image_url: width: 400 }}"
                                alt="{{ product.title }}"
                                itemprop="image"
                        />
                      </a>

                      <div class="thumbnail-wrapper">
                        {% for image in product.images limit: 15 %}
                          <img
                                  class="thumbnail"
                                  src="{{ image | image_url: width: 400 }}"
                                  alt="{{ product.title }} thumbnail"
                                  onclick="this.closest('.product-card').querySelector('.main-image').src = this.src"
                                  width="50px" height="50px"
                          />
                        {% endfor %}

                      </div>

                      <h3 itemprop="name" class="product-name">{{ product.title }}</h3>
                      <div itemprop="offers"  class="product-price" itemscope itemtype="https://schema.org/Offer">
                        <meta itemprop="priceCurrency" content="INR" />
                        <span itemprop="price">{{ product.price | money }}</span>
                        <link itemprop="availability" href="https://schema.org/InStock" />
                      </div>

                      {% if product.metafields.custom.short_description %}
                        <p class="product-short-desc">
                          {{ product.metafields.custom.short_description }}
                        </p>
                      {% endif %}
                    </div>
                  </div>
                {% endfor %}
              </div>
              {% if collection.products.size > 4 %}
                <div class="prev-next-button">
                  <div class="item-prev pagination__item--prev">
                     <span class="svg-wrapper">
                        {{- 'icon-caret.svg' | inline_asset_content -}}
                      </span>
                  </div>
                  <div class="item-next pagination__item--prev">
                    <span class="svg-wrapper">
                                    {{- 'icon-caret.svg' | inline_asset_content -}}
                                  </span>
                  </div>
                </div>
              {% endif %}
            </div>
          {% else %}
            <p>No products found in this collection.</p>
          {% endif %}
        </div>
      {% endfor %}
    </div>
  </div>

</div>

{% comment %}<script defer>
  document.addEventListener('DOMContentLoaded', () => {

    window.addEventListener('resize', () => {

      document.querySelectorAll(".thumbnail-wrapper").forEach(parent => {
        const thumbnails = Array.from(parent.querySelectorAll(".thumbnail"));
        const totalThumbnails = thumbnails.length;
        let indicator = null;
        let expanded = false;

        const observer = new ResizeObserver(() => {
          if (expanded) return;

          // Remove any existing indicators in case of duplicates
          parent.querySelectorAll('.more-images-indicator').forEach(el => el.remove());


          const parentWidth = parent.clientWidth;
          let currentWidth = 0;
          let visibleCount = 0;

          let lastVisibleIndex = -1;
          thumbnails.forEach((thumbnail, i) => {
            thumbnail.style.display = 'block';

            const thumbnailWidth = thumbnail.offsetWidth;
            const margins = parseFloat(getComputedStyle(thumbnail).marginLeft) +
                    parseFloat(getComputedStyle(thumbnail).marginRight);

            currentWidth += thumbnailWidth + margins;

            if (currentWidth <= parentWidth) {
              visibleCount++;
              lastVisibleIndex = i;
            } else {
              thumbnail.style.display = 'none';
            }
          });
          const hiddenCount = totalThumbnails - visibleCount;
          if (hiddenCount > 0 && lastVisibleIndex >= 0) {
            thumbnails[lastVisibleIndex].style.display = 'none';

            indicator = document.createElement('span');
            indicator.className = 'more-images-indicator';
            indicator.style.display = 'flex';
            indicator.style.cursor = 'pointer';
            const indicatorCount = hiddenCount + 1;


            indicator.innerHTML = `
            <span class="count">+${indicatorCount}</span>
          `;

            // Add click handler to show all thumbnails in a modal or expand the container
            indicator.addEventListener('click', (event) => {
              event.preventDefault();
              event.stopPropagation();
              expanded = true;
              // Add your logic to show all thumbnails in a modal or expand the container

              thumbnails.forEach(thumbnail => {
                thumbnail.style.display = 'block';
              });

              // Hide the indicator

              if (indicator) {
                indicator.remove();
                indicator = null;
              }
            });

            parent.appendChild(indicator);
          }
        });

        observer.observe(parent);
      });
    })

  });
</script>{% endcomment %}


<script defer>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll(".thumbnail-wrapper").forEach(parent => {
      const thumbnails = Array.from(parent.querySelectorAll(".thumbnail"));
      const totalThumbnails = thumbnails.length;
      let indicator = null;
      let expanded = false;

      const updateThumbnails = () => {
        if (expanded) return;

        // Remove existing indicators to prevent duplicates
        parent.querySelectorAll('.more-images-indicator').forEach(el => el.remove());

        const parentWidth = parent.clientWidth;
        let currentWidth = 0;
        let visibleCount = 0;
        let lastVisibleIndex = -1;

        // Show all initially to measure accurately
        thumbnails.forEach(thumbnail => thumbnail.style.display = 'block');

        thumbnails.forEach((thumbnail, i) => {
          const style = getComputedStyle(thumbnail);
          const totalWidth = thumbnail.offsetWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);

          if ((currentWidth + totalWidth) <= parentWidth) {
            currentWidth += totalWidth;
            visibleCount++;
            lastVisibleIndex = i;
          } else {
            thumbnail.style.display = 'none';
          }
        });

        const hiddenCount = totalThumbnails - visibleCount;
        if (hiddenCount > 0 && lastVisibleIndex >= 0) {
          thumbnails[lastVisibleIndex].style.display = 'none';

          const indicatorCount = hiddenCount + 1;
          indicator = document.createElement('span');
          indicator.className = 'more-images-indicator';
          indicator.style.display = 'flex';
          indicator.style.cursor = 'pointer';
          indicator.innerHTML = `<span class="count">+${indicatorCount}</span>`;

          indicator.addEventListener('click', (event) => {
            event.preventDefault();
            event.stopPropagation();
            if (expanded) return;

            expanded = true;

            // Show all thumbnails
            thumbnails.forEach(thumbnail => {
              thumbnail.style.display = 'block';
            });

            // Remove indicator
            if (indicator) {
              indicator.remove();
              indicator = null;
            }
          });

          parent.appendChild(indicator);
        }
      };

      // Setup ResizeObserver once
      const observer = new ResizeObserver(updateThumbnails);
      observer.observe(parent);

      // Trigger once on load
      updateThumbnails();

      // Also update on window resize (optional if ResizeObserver works fully)
      window.addEventListener('resize', updateThumbnails);
    });
  });
</script>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll(".pua-tabs li");
    const contents = document.querySelectorAll(".pua-tab-content");
    tabs.forEach((tab, i) => {
      tab.addEventListener("click", () => {
        tabs.forEach((t) => t.classList.remove("active"));
        contents.forEach((c) => c.classList.remove("active"));

        tab.classList.add("active");
        contents[i].classList.add("active");
      });
    });
    document.querySelectorAll(".pua-product-slider").forEach(function (sliderEl) {
      const productCount = parseInt(sliderEl.dataset.productCount, 10);
      if (productCount > 4) {
        new Swiper(sliderEl, {
          slidesPerView: 4,
          spaceBetween: 20,
          navigation: {
            nextEl: sliderEl.querySelector(".item-next"),
            prevEl: sliderEl.querySelector(".item-prev")
          },
          breakpoints: {
            0: { slidesPerView: 1.5 },
            768: { slidesPerView: 2.5 },
            1200: { slidesPerView: 3.5 }
          }
        });
      } else {
        sliderEl.classList.add('static-grid');
      }
    });
  });
</script>


