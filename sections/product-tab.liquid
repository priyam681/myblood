{% schema %}
{
  "name": "Product Tabs",
  "tag": "section",
  "settings": [
   {
       "type": "text",
       "id": "tab_heading",
       "label": "Tab Heading",
       "default": "LATEST"
    }
  ],

  "blocks": [
    {
      "type": "tab",
      "name": "Product Tab",
      "settings": [
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Title",
          "default": "MENS"
        },
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        }
      ]
    }
  ],
  "max_blocks": 4,
  "presets": [
    {
      "name": "Product Tabs",
      "blocks": [
        {
          "type": "tab",
          "settings": {
            "tab_title": "MENS"
          }
        },
        {
          "type": "tab",
          "settings": {
            "tab_title": "WOMENS"
          }
        },
        {
          "type": "tab",
          "settings": {
            "tab_title": "KIDS"
          }
        }
      ]
    }
  ]
}
{% endschema %}

<div class="pua-tabs-wrapper page-width">
<div class="tabs-inner-wrapper">
<div class="tabs-wrapper">
<div class="tab_heading">{{ section.settings.tab_heading }}</div>
  <ul class="pua-tabs">
    {% for block in section.blocks %}
      <li class="{% if forloop.first %}active{% endif %}" data-tab="tab-{{ forloop.index }}">
        {{ block.settings.tab_title }}
      </li>
    {% endfor %}
  </ul>
</div>
  {% for block in section.blocks %}
    <div class="pua-tab-content {% if forloop.first %}active{% endif %}" id="tab-tab-{{ forloop.index }}">
      {% assign collection = collections[block.settings.collection] %}
      {% if collection.products.size > 0 %}
        <div class="pua-product-slider swiper" data-product-count="{{ collection.products.size }}">
          <div class="swiper-wrapper">
            {% for product in collection.products %}
              <div class="swiper-slide">
                <div class="product-card" itemscope itemtype="https://schema.org/Product">
                  <a href="{{ product.url }}" itemprop="url">
                    <img
                      class="main-image"
                      src="{{ product.featured_image | image_url: width: 400 }}"
                      alt="{{ product.title }}"
                      itemprop="image"
                    />
                  </a>

                  <div class="thumbnail-wrapper">
                      {% for image in product.images limit: 15 %}
                        <img
                                class="thumbnail"
                                src="{{ image | image_url: width: 400 }}"
                                alt="{{ product.title }} thumbnail"
                                onclick="this.closest('.product-card').querySelector('.main-image').src = this.src"
                                width="50px" height="50px"
                        />
                      {% endfor %}

                  </div>

                  <h3 itemprop="name" class="product-name">{{ product.title }}</h3>
                  <div itemprop="offers"  class="product-price" itemscope itemtype="https://schema.org/Offer">
                    <meta itemprop="priceCurrency" content="INR" />
                    <span itemprop="price">{{ product.price | money }}</span>
                    <link itemprop="availability" href="https://schema.org/InStock" />
                  </div>

                  <p class="desc">Memory Foam Insole & UltraSoft Outsole</p>
                </div>
              </div>
            {% endfor %}
          </div>
        {% if collection.products.size > 4 %}
                    <div class="prev-next-button">
                    <div class="item-prev pagination__item--prev">
                     <span class="svg-wrapper">
                        {{- 'icon-caret.svg' | inline_asset_content -}}
                      </span>
                    </div>
                    <div class="item-next pagination__item--prev">
                    <span class="svg-wrapper">
                                    {{- 'icon-caret.svg' | inline_asset_content -}}
                                  </span>
                    </div>
                    </div>
                  {% endif %}
                   </div>
      {% else %}
        <p>No products found in this collection.</p>
      {% endif %}
    </div>
  {% endfor %}
</div>
</div>

{% comment %}<script defer>
  document.addEventListener('DOMContentLoaded', () => {
    // Use querySelectorAll to handle multiple thumbnail wrappers on the page
    const thumbnailWrappers = document.querySelectorAll(".thumbnail-wrapper");


    thumbnailWrappers.forEach(parent => {
      const children = parent.querySelectorAll(".thumbnail");
      const totalLength = children.length;
      let childrenLength = totalLength;

      const observer = new ResizeObserver(() => {
        const parentWidth = parent.clientWidth;
        let currentWidth = 0;

        // Calculate visibility for each thumbnail
        children.forEach(child => {
          // Reset display before measuring
          child.style.display = 'block';

          const childWidth = child.offsetWidth;
          const margins = parseFloat(getComputedStyle(child).marginLeft) +
                  parseFloat(getComputedStyle(child).marginRight);

          currentWidth += childWidth + margins;

          // Hide thumbnails that would overflow
          if (currentWidth > parentWidth) {
            childrenLength--;
            child.style.display = 'none';
          }
        });

        let remaining = totalLength - childrenLength;

        if (totalLength <= remaining) {
          const plus = `<span class="more-images-indicator">
                      <span class="icon-wrapper">
                        <img src="{{ 'asterix.jpg' | asset_url }}" alt="More images" width="20" height="20"/>
                      </span>
                      <span class="count">0</span>
                   </span>`
          children.insertAdjacentHTML('afterend', plus)
        }


      });

      observer.observe(parent);

    // Update the count in the span



    });
  });
</script>
{% endcomment %}

<script defer>
  document.addEventListener('DOMContentLoaded', () => {
    // Handle multiple thumbnail wrappers on the page
    document.querySelectorAll(".thumbnail-wrapper").forEach(parent => {
      const thumbnails = Array.from(parent.querySelectorAll(".thumbnail"));
      const totalThumbnails = thumbnails.length;
      let indicator = null;

      const observer = new ResizeObserver(() => {
        // Remove any existing indicator before recalculating
        if (indicator) {
          indicator.remove();
          indicator = null;
        }

        const parentWidth = parent.clientWidth;
        let currentWidth = 0;
        let visibleCount = 0;

        let lastVisibleIndex = -1;

        // Calculate which thumbnails can be displayed
        thumbnails.forEach((thumbnail, i) => {
          // Reset display before measuring
          thumbnail.style.display = 'block';

          const thumbnailWidth = thumbnail.offsetWidth;
          const margins = parseFloat(getComputedStyle(thumbnail).marginLeft) +
                  parseFloat(getComputedStyle(thumbnail).marginRight);

          currentWidth += thumbnailWidth + margins;

          if (currentWidth <= parentWidth) {
            visibleCount++;
            lastVisibleIndex = i;
          } else {
            thumbnail.style.display = 'none';
          }
        });

        // Calculate remaining hidden thumbnails
        const hiddenCount = totalThumbnails - visibleCount;

        // Only show indicator if there are hidden thumbnails
        if (hiddenCount > 0 && lastVisibleIndex >= 0) {
          thumbnails[lastVisibleIndex].style.display = 'none';

          // create the indicator
          indicator = document.createElement('span');
          indicator.className = 'more-images-indicator';
          indicator.style.display = 'flex';

          // count includes the last hidden thumbnail plus any others.

          const indicatorCount = hiddenCount + 1;

          indicator.innerHTML = `
            <span class="count">+${indicatorCount}</span>
          `;

          // Add click handler to show all thumbnails in a modal or expand the container
          indicator.addEventListener('click', () => {
            // Implement your logic to show all thumbnails here
            thumbnails.forEach(thumbnail => {
              thumbnail.style.display = 'block';
            });

            indicator.remove();
            indicator = null;
          });

          parent.appendChild(indicator);
        }
      });

      observer.observe(parent);
    });
  });
</script>


<style>
.more-images-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-width: 50px;
    height: 50px;
    border: 1px solid #eee;
    border-radius: 4px;
    background-color: #f9f9f9;
    cursor: pointer;
    transition: background-color 0.2s;
    display: none;
  }

  .more-images-indicator:hover {
    background-color: #f0f0f0;
    border-color: #ddd;
  }

  .icon-wrapper {
    display: flex;
    justify-content: center;
    height:100%;
  }

  .icon-wrapper img {
    width: 20px;
    height: 20px;
    object-fit: contain;
  }

  .count {
    font-size: 12px;
    font-weight: bold;
    color: #666;
    margin-top: 2px;
  }
  .tabs-wrapper {
    margin: 30px 0 40px;
  }
  .tabs-wrapper .tab_heading {
    font-weight: bold;
    color: #000;
  }

.thumbnail-wrapper {
  display: flex;
  gap: 6px;
  margin-top: 8px;
  flex-wrap: wrap;
}

.product-card .thumbnail {
  width: calc(40px + (70 - 40) * ((100vw - 360px) / (1920 - 360)));
  height: calc(40px + (70 - 40) * ((100vw - 360px) / (1920 - 360)));
  min-width: calc(40px + (70 - 40) * ((100vw - 360px) / (1920 - 360)));
  min-height: calc(40px + (70 - 40) * ((100vw - 360px) / (1920 - 360)));
  object-fit: cover;
  cursor: pointer;
  border: 1px solid #eee;
  border-radius: 4px;
  transition: border 0.2s;
}

.thumbnail:hover {
  border-color: red;
}

  .pua-tabs {
    display: flex;
    list-style: none;
    gap: 20px;
    font-weight: bold;
    padding: 0;
    margin: 0;
  }
  .pua-tabs li {
    cursor: pointer;
    color: gray;
  }
  .pua-tabs li.active {
    color: red;
    border-bottom: 2px solid red;
  }
  .pua-tab-content {
    display: none;
  }
  .pua-tab-content.active {
    display: block;
  }
  .pua-product-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-top: 20px;
  }
  .product-card img {
    width: 100%;
    height: auto;
  }
  .product-card .main-image {
    aspect-ratio: 1;
  }
  .product-card .product-price {
    font-size: calc(14px + (22 - 14) * ((100vw - 360px) / (1920 - 360)));
    line-height: 1;
    color: #ff3200;
    font-weight: 500;
  }
  .product-card .product-name {
    font-size: calc(16px + (24 - 16) * ((100vw - 360px) / (1920 - 360)));
    line-height: 1;
    margin: 2.4rem 0 0.8rem;
    font-weight: 500;
  }
   .product-card .desc {
     margin-top: 1.2rem;
   }
  .pua-product-slider.static-grid .swiper-wrapper {
    display: flex;
    flex-wrap: wrap;
  }
  .pua-product-slider.static-grid .swiper-slide {
    width: 100%;
    max-width: 25%;
  }
  .pua-product-slider .swiper-slide {
    box-sizing: border-box;
  }
  .thumbnail {
    border: 1px solid #ccc;
    cursor: pointer;
  }
  .thumbnail:hover {
    border-color: red;
  }
.tabs-inner-wrapper .item-prev,
.tabs-inner-wrapper .item-next {
  background: black;
  color: #fff;
  display: flex;
  padding: 17px;
  cursor: pointer;
}
.tabs-inner-wrapper .swiper-button-disabled {
  opacity: 0.35;
  pointer-events: none;
}
.prev-next-button {
    display: flex;
    gap: 20px;
    position: absolute;
    right: 0;
    top: 0;
    z-index: 1;
}
.item-prev .svg-wrapper {
 transform: rotate(90deg);
}
.item-next .svg-wrapper {
 transform: rotate(270deg);
}
.tabs-inner-wrapper {
   position: relative;
}
.tabs-inner-wrapper .swiper {
  position: unset;
}
@media screen and (max-width: 768px) {
.tabs-wrapper .tab_heading {
    margin-bottom: 12px;
  }
  }

@media screen and (min-width: 768px) {
.tabs-wrapper {
    display: flex;
    gap: 20px;
  }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const tabs = document.querySelectorAll(".pua-tabs li");
    const contents = document.querySelectorAll(".pua-tab-content");
    tabs.forEach((tab, i) => {
      tab.addEventListener("click", () => {
        tabs.forEach((t) => t.classList.remove("active"));
        contents.forEach((c) => c.classList.remove("active"));

        tab.classList.add("active");
        contents[i].classList.add("active");
      });
    });
    document.querySelectorAll(".pua-product-slider").forEach(function (sliderEl) {
      const productCount = parseInt(sliderEl.dataset.productCount, 10);
      if (productCount > 4) {
        new Swiper(sliderEl, {
          slidesPerView: 4,
          spaceBetween: 20,
          navigation: {
            nextEl: sliderEl.querySelector(".item-next"),
            prevEl: sliderEl.querySelector(".item-prev")
          },
          breakpoints: {
            0: { slidesPerView: 1.5 },
            768: { slidesPerView: 2.5 },
            1200: { slidesPerView: 3.5 }
          }
        });
      } else {
        sliderEl.classList.add('static-grid');
      }
    });
  });
</script>


