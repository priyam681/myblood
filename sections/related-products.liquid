{{ 'home-page-product.css' | asset_url | stylesheet_tag }}
{{ 'section-related-products.css' | asset_url | stylesheet_tag }}
{{ 'swiper-bundle.min.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
    {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- if section.settings.quick_add == 'standard' -%}
    <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<script src="{{ 'swiper-bundle.min.js' | asset_url }}" defer></script>
<script src="{{ 'product-slider.js' | asset_url }}" defer></script>

{%- style -%}
    .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    }

    @media screen and (min-width: 768px) {
    .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
    }
    }

    .related-products-swiper {
    overflow: hidden;
    position: relative;
    }
  .related-products-swiper .swiper-wrapper {
    display: flex;
    padding-left: 0;
    }

    .related-products-swiper .swiper-slide {
    flex-shrink: 0;
    width: auto;
    }

    .related-products-header .prev-next-button .item-prev,
    .related-products-header .prev-next-button .item-next {
    background: #111111;
    color: #fff;
    display: flex;
    padding: 17px;
    cursor: pointer;
    transition: all 0.3s ease;
    }

    .related-products-header .prev-next-button .item-prev:hover,
    .related-products-header .prev-next-button .item-next:hover {
    background: #333333;
    transform: scale(1.05);
    }

    .related-products-header .prev-next-button .item-prev.clicked,
    .related-products-header .prev-next-button .item-next.clicked {
    transform: scale(0.95);
    background: #555;
    }

    .related-products-header .prev-next-button.swiper-button-disabled,
    .related-products-header .swiper-button-disabled {
    opacity: 0.35;
    pointer-events: none;
    }

    .related-products-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    }

    .related-products-header .prev-next-button {
    display: flex;
    gap: 20px;
    z-index: 1;
    }

    .related-products-header .item-prev .svg-wrapper {
    transform: rotate(90deg);
    }

    .related-products-header .item-next .svg-wrapper {
    transform: rotate(270deg);
    }

    @media screen and (max-width: 768px) {
    .related-products-header .prev-next-button {
    display: none;
    }

    .related-products-header {
    justify-content: center;
    }
    }

    .related-products-view-all {
    text-align: center;
    margin-top: 20px;
    padding-top: 20px;
    }

    .view-all-btn {
    display: inline-block;
    padding: 12px 30px;
    background: #FF4500;
    color: #fff;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 14px;
    }

    .view-all-btn:hover {
    background: #E03E00;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255,69,0,0.3);
    }
{%- endstyle -%}

<div class="color-{{ section.settings.color_scheme }} gradient">
    <product-recommendations
            class="related-products page-width section-{{ section.id }}-padding isolate{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
            data-url="{{ routes.product_recommendations_url }}?limit={{ section.settings.products_to_show }}"
            data-section-id="{{ section.id }}"
            data-product-id="{{ product.id }}"
    >
        {% if recommendations.performed and recommendations.products_count > 0 %}
            <div class="related-products-header">
                <h2 class="related-products__heading inline-richtext {{ section.settings.heading_size }}">
                    {{ section.settings.heading }}
                </h2>
                <div class="prev-next-button">
                    <div class="item-prev pagination__item--prev">
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
                    </div>
                    <div class="item-next pagination__item--prev">
            <span class="svg-wrapper">
              {{- 'icon-caret.svg' | inline_asset_content -}}
            </span>
                    </div>
                </div>
            </div>
            <related-product>
                <div class="swiper related-products-swiper">
                    <ul
                            class="swiper-wrapper"
                            role="list"
                    >
                        {% for recommendation in recommendations.products %}
                            <li class="swiper-slide">
                                {% render 'related-product-card',
                                        card_product: recommendation,
                                        section_id: section.id
                                %}
                            </li>
                        {% endfor %}
                    </ul>
                </div>
            </related-product>

            {% if recommendations.performed and recommendations.products_count > 0 and section.settings.show_view_all %}
                <div class="related-products-view-all">
                    <a href="{{ section.settings.view_all_url | default: collections.all.url }}" class="view-all-btn">
                        {{ section.settings.view_all_text | default: "View All Products" }}
                    </a>
                </div>
            {% endif %}
        {% endif %}
    </product-recommendations>
    {% if section.settings.image_shape == 'arch' %}
        {{ 'mask-arch.svg' | inline_asset_content }}
    {%- endif -%}
</div>

<script defer>
  function initializeRelatedProductsSwiper() {
    const swiperEl = document.querySelector('.related-products-swiper');
    if (swiperEl && typeof Swiper !== 'undefined') {
      const swiper = new Swiper(swiperEl, {
        slidesPerView: 1,
        spaceBetween: 20,
        navigation: {
          nextEl: '.item-next',
          prevEl: '.item-prev'
        },
        breakpoints: {
          640: {
            slidesPerView: 2,
            spaceBetween: 20
          },
          768: {
            slidesPerView: 3,
            spaceBetween: 30
          },
          1024: {
            slidesPerView: {{ section.settings.columns_desktop | default: 4 }},
            spaceBetween: 30
          }
        },
        on: {
          init: function() {
            updateNavigationState(this);
          },
          slideChange: function() {
            updateNavigationState(this);
          }
        }
      });

      // Add click event listeners for better visual feedback
      const prevBtn = swiperEl.querySelector('.item-prev');
      const nextBtn = swiperEl.querySelector('.item-next');

      if (prevBtn) {
        prevBtn.addEventListener('click', function() {
          this.classList.add('clicked');
          setTimeout(() => this.classList.remove('clicked'), 150);
        });
      }

      if (nextBtn) {
        nextBtn.addEventListener('click', function() {
          this.classList.add('clicked');
          setTimeout(() => this.classList.remove('clicked'), 150);
        });
      }
    }
  }

  function updateNavigationState(swiper) {
    const prevBtn = swiper.el.querySelector('.item-prev');
    const nextBtn = swiper.el.querySelector('.item-next');

    if (prevBtn) {
      prevBtn.classList.toggle('swiper-button-disabled', swiper.isBeginning);
    }

    if (nextBtn) {
      nextBtn.classList.toggle('swiper-button-disabled', swiper.isEnd);
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const productRecommendations = document.querySelector('product-recommendations[data-section-id="{{ section.id }}"]');

    if (productRecommendations) {
      // Observer to detect when content is loaded
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            // Check if related products content was added
            const hasSwiper = document.querySelector('.related-products-swiper');
            if (hasSwiper) {
              setTimeout(initializeRelatedProductsSwiper, 100);
              observer.disconnect();
            }
          }
        });
      });

      observer.observe(productRecommendations, {
        childList: true,
        subtree: true
      });

      // Also try to initialize immediately in case content is already loaded
      setTimeout(initializeRelatedProductsSwiper, 200);
    }
  });
</script>

<script defer>

  if (!customElements.get('related-product')) {
    class RelatedProduct extends HTMLElement {
      constructor() {
        super();
        this.resizeObserver = new ResizeObserver(this.debounce(this.handleResize.bind(this), 10));
      }

      debounce(fn, delay) {
        let timeoutId;
        return (...args) => {
          if (timeoutId) {
            clearTimeout(timeoutId);
          }
          timeoutId = setTimeout(() => {
            fn(...args);
          }, delay);
        };
      }

      connectedCallback() {
        this.tabs = Array.from(this.querySelectorAll('.product-card'));
        requestAnimationFrame(() => {
          this.tabs.forEach(tab => {
            const thumbnailWrapper = tab.querySelector('.thumbnail-wrapper:not(.expand-thumbnails)');
            const expandButton = document.createElement('div');
            expandButton.className = 'expand-thumbnails thumbnail';
            expandButton.setAttribute('aria-label', 'Show all images');
            thumbnailWrapper.appendChild(expandButton);

            expandButton.addEventListener('click', () => this.toggleThumbnails(thumbnailWrapper));

            this.resizeObserver.observe(tab);
          });
        });
      }

      toggleThumbnails(wrapper) {
        wrapper.classList.toggle('show-all');
        const button = wrapper.querySelector('.expand-thumbnails');
        button.innerHTML = wrapper.classList.contains('show-all') ? '-' : '+';
        button.setAttribute('aria-label', wrapper.classList.contains('show-all') ? 'Show fewer images' : 'Show all images');
      }

      handleResize(entries) {
        requestAnimationFrame(() => {
          entries.forEach(entry => {
            const containerWidth = entry.contentRect.width;
            const target = entry.target;
            const thumbnailWrapper = target.querySelector('.thumbnail-wrapper');
            const thumbnails = Array.from(thumbnailWrapper.querySelectorAll('.thumbnail-image-wrapper'));
            let counter = 0;


            // Don't hide thumbnails if show-all is active
            if (thumbnailWrapper.classList.contains('show-all')) {
              thumbnails.forEach(thumbnail => {
                thumbnail.style.display = '';
              });
              return;
            }


            let currentWidth = 0;
            const gap = 5; // gap between thumbnails (match your CSS gap)

            thumbnails.forEach((thumbnail, index) => {
              // Reset display to calculate proper dimensions
              thumbnail.style.display = '';

              // Get the actual width including margins
              const thumbnailWidth = thumbnail.offsetWidth;

              // Add gap except for the first thumbnail
              currentWidth += thumbnailWidth;

              // Hide if exceeds container width
              if (currentWidth > containerWidth) {
                ++counter;
                thumbnail.style.display = 'none';
              }
            });

            if (counter > 0) {
              let lastVisible = thumbnails.length - counter - 1;
              thumbnails[lastVisible].style.display = 'none';
              counter = counter + 1;
            }


            // Show/hide expand button based on if there are hidden thumbnails
            const expandButton = thumbnailWrapper.querySelector('.expand-thumbnails');
            expandButton.innerHTML = `+${counter}`;

            const hasHiddenThumbnails = thumbnails.some(thumb => thumb.style.display === 'none');
            expandButton.style.display = hasHiddenThumbnails ? '' : 'none';

          });
        });
      }


      disconnectedCallback() {
        if (this.resizeObserver) {
          this.resizeObserver.disconnect();
        }
      }
    }

    customElements.define('related-product', RelatedProduct);
  }

  window.addEventListener('error', (e) => {
    console.log(e);
  });

</script>

{% schema %}
{
  "name": "t:sections.related-products.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.related-products.settings.paragraph__1.content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "default": "t:sections.related-products.settings.paragraph__1.default",
      "label": "t:sections.related-products.settings.heading.label"
    },
    {
      "type": "checkbox",
      "id": "variant",
      "label": "Variant",
      "default": false
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 10,
      "step": 1,
      "default": 4,
      "label": "t:sections.related-products.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.related-products.settings.columns_desktop.label"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.related-products.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.related-products.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.related-products.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.related-products.settings.header__2.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.related-products.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.related-products.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.related-products.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.related-products.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.related-products.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.related-products.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.related-products.settings.show_rating.label",
      "info": "t:sections.related-products.settings.show_rating.info"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
    {
      "type": "header",
      "content": "View All Button"
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "Show View All Button",
      "default": true
    },
    {
      "type": "text",
      "id": "view_all_text",
      "label": "View All Button Text",
      "default": "View All Products"
    },
    {
      "type": "url",
      "id": "view_all_url",
      "label": "View All Button URL",
      "info": "Leave empty to link to all products"
    }
  ]
}
{% endschema %}
